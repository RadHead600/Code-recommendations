using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.CompilerServices.RuntimeHelpers;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]

public class PlayerGovernance : MonoBehaviour
{
    private const string playerAnimIsRun = "isRun";
    private const string playerAnimIsJump = "isJump";
    private const string HORIZONTAL = "Horizontal";

    [SerializeField] private float _speed;
    [SerializeField] private float _jumpheight;
    [SerializeField] private Transform _groundCheck;
    [SerializeField] private Transform _spriteTrans;
    [SerializeField] private Text _coinText;

    private int _coins = 0;

    private Rigidbody2D _rb;
    private Animator _anim;

    private void Start()
    {
        _rb = GetComponent<Rigidbody2D>();
        _anim = GetComponent<Animator>();
    }

    private void Update()
    {
        float x = Input.GetAxis(HORIZONTAL);

        if (x != 0) _anim.SetBool(playerAnimIsRun, true);
        else _anim.SetBool(playerAnimIsRun, false);
        Flip(x);

        _rb.velocity = new Vector2(x * _speed * Time.deltaTime, _rb.velocity.y);

        if (Input.GetKeyDown(KeyCode.Space) && CheckGround())
        {
            _rb.AddForce(transform.up * _jumpheight, ForceMode2D.Impulse);
            _anim.SetTrigger(playerAnimIsJump);
        }
    }

    private void Flip(float x)
    {
        float isPlayerGoRight = x > 0 ? (-1f) : (1f);
        _spriteTrans.localScale = new Vector3(isPlayerGoRight, 1f, 1f);
    }

    private bool CheckGround()
    {
        Collider2D[] colliders = Physics2D.OverlapCircleAll(_groundCheck.position, 0.2f);

        if (colliders.Length > 1) return true;
        else return false;
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Coin coin))
        {
            _coins++;
            _coinText.text = _coins.ToString();
            coin.gameObject.SetActive(false);
        }
    }
}
