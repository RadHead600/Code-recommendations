using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    [SerializeField] private float _speed;
    [SerializeField] private float _speedVolumeChange;
    [SerializeField] private float _jumpheight;
    [SerializeField] private Transform _groundCheck;
    [SerializeField] private Transform _spriteTrans;
    [SerializeField] private Text _coinText;
    [SerializeField] private AudioSource _audioSource;
    [SerializeField] private GameObject _house;

    private int _coins = 0;   

    private const float _maxVolume = 0.2f;
    private const float _minVolume = 0f;
    private const string coinTag = "Coin";
    private const string playerAnimIsRun = "isRun";
    private const string playerAnimIsJump = "isJump";
    private const string HORIZONTAL = "Horizontal";

    private Rigidbody2D _rb;
    private Animator _anim;
    private Coroutine coroutine;

    private void Start()
    {
        _rb = GetComponent<Rigidbody2D>();
        _anim = GetComponent<Animator>();
        _audioSource.volume = 0f;       
    }

    private void Update()
    {
        float x = Input.GetAxis(HORIZONTAL);

        int lowestPossibleValue = 0;

        if (x != lowestPossibleValue) _anim.SetBool(playerAnimIsRun, true);
        else _anim.SetBool(playerAnimIsRun, false);

        Flip(x);
            
        _rb.velocity = new Vector2(x * _speed * Time.deltaTime, _rb.velocity.y);

        if (Input.GetKeyDown(KeyCode.Space) && CheckGround())
        {
            _rb.AddForce(transform.up * _jumpheight, ForceMode2D.Impulse);
            _anim.SetTrigger(playerAnimIsJump);
        }
            
    }
    private void Flip(float x)
    {
        int lowestPossibleValue = 0;

        float isPlayerGoRight = x > lowestPossibleValue ? (-1f) : (1f);
        _spriteTrans.localScale = new Vector3(isPlayerGoRight, 1f, 1f);
    }
    private bool CheckGround()  
    {
        float groundCheckPosition = 0,2f;

        int collidersLength = 1;

        Collider2D[] colliders = Physics2D.OverlapCircleAll(_groundCheck.position, groundCheckPosition);

        if(colliders.Length > collidersLength) return true;
        else return false;    
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == coinTag)
        {
            _coins++;
            _coinText.text = _coins.ToString();
            collision.gameObject.SetActive(false);
        }

        if (collision.gameObject == _house)
        {
            SignalingController(true);
        }
            
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject == _house)
        {
            SignalingController(false);
        }
    }

    private void SignalingController(bool isEnter)
    {
        float requiredVolume;

        if (isEnter) requiredVolume = _maxVolume;
        else requiredVolume = _minVolume;

        if (coroutine != null) StopCoroutine(coroutine);
        coroutine = StartCoroutine(ChangeVolume(requiredVolume));
    }

    private IEnumerator ChangeVolume(float requiredVolume)
    {
        while (true)
        {
            yield return new WaitForEndOfFrame();

            _audioSource.volume = Mathf.MoveTowards(_audioSource.volume, requiredVolume, _speedVolumeChange * Time.deltaTime);

            if (_audioSource.volume == requiredVolume)
            {
                coroutine = null;
                break;
            }           

        }
    }
}
