using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    [SerializeField] private float _speed;
    [SerializeField] private float _jumpheight;
    [SerializeField] private Transform _groundCheck;
    [SerializeField] private Transform _spriteTrans;
    [SerializeField] private Text _coinText;
    [SerializeField] private AudioSource _audioSource;

   private int _coins = 0;
    private float _volume = 0;
    private float _maxVolume = 0.2f;
    private float _minVolume = 0f;
    private Coroutine coroutine;


    private const string playerAnimIsRun = "isRun";
    private const string playerAnimIsJump = "isJump";

    private Rigidbody2D _rb;
    private Animator _anim;

    private void Start()
    {
        _rb = GetComponent<Rigidbody2D>();
        _anim = GetComponent<Animator>();
        _audioSource.volume = 0f;       
    }

    private void Update()
    {
        float x = Input.GetAxis("Horizontal");

        if (x > 0.1f || x < -0.1f) _anim.SetBool(playerAnimIsRun, true);
        else _anim.SetBool(playerAnimIsRun, false);

        Flip(x);
            
        _rb.velocity = new Vector2(x * _speed * Time.deltaTime * 100, _rb.velocity.y);
        
        if (Input.GetKeyDown(KeyCode.Space) && CheckGround())
        {
            _rb.AddForce(transform.up * _jumpheight, ForceMode2D.Impulse);
            _anim.SetTrigger(playerAnimIsJump);
        }
            
    }
    private void Flip(float x)
    {
        float isPlayerGoRight = x > 0 ? (-1f) : (1f);
        _spriteTrans.localScale = new Vector3(isPlayerGoRight, 1f, 1f);
    }
    private bool CheckGround()  
    {
        Collider2D[] colliders = Physics2D.OverlapCircleAll(_groundCheck.position, 0.2f);
        
        if(colliders.Length > 1) return true;
        else return false;    
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if(collision.gameObject.tag == "Coin")
        {
            _coins++;
            _coinText.text = _coins.ToString();
            collision.gameObject.SetActive(false);
        }

        if (collision.gameObject.tag == "House")
        {
            if(coroutine != null) StopCoroutine(coroutine);
            coroutine = StartCoroutine(SignalingVolumeChange(true));
        }
            
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "House")
        {
            if (coroutine != null) StopCoroutine(coroutine);
            coroutine = StartCoroutine(SignalingVolumeChange(false));
        }
    }

    private IEnumerator SignalingVolumeChange(bool isPlayerInHouse)
    {
        bool volumeChangeDone = false;
        
        while (!volumeChangeDone)
        {
            yield return new WaitForEndOfFrame();
            
            if(isPlayerInHouse)
            {
                _audioSource.volume = Mathf.MoveTowards(_audioSource.volume, _maxVolume, 0.1f * Time.deltaTime);
                
                if (_audioSource.volume == _maxVolume)
                {
                    volumeChangeDone = true;
                    coroutine = null;
                }
            }           
            else
            {
                _audioSource.volume = Mathf.MoveTowards(_audioSource.volume, _minVolume, 0.1f * Time.deltaTime);
                
                if (_audioSource.volume == _minVolume)
                {
                    volumeChangeDone = true;
                    coroutine = null;
                }
            }         
        }
    }
}
